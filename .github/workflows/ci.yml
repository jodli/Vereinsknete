name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint-and-test-backend:
    name: Backend - Lint & Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: backend

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev pkg-config

    - name: Install Diesel CLI
      run: cargo install diesel_cli --no-default-features --features sqlite

    - name: Check Rust formatting
      working-directory: ./backend
      run: cargo fmt --all -- --check

    - name: Run Clippy (Rust linter)
      working-directory: ./backend
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run backend tests
      working-directory: ./backend
      run: cargo test --verbose

    - name: Build backend (release)
      working-directory: ./backend
      run: cargo build --release

  lint-and-test-frontend:
    name: Frontend - Lint & Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Check TypeScript compilation
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run ESLint
      working-directory: ./frontend
      run: npx eslint src --ext .ts,.tsx --max-warnings 0

    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test:ci

    - name: Build frontend (production)
      working-directory: ./frontend
      run: npm run build

    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage
        path: frontend/coverage/
        retention-days: 7

  docker-build-test:
    name: Docker - Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-test-backend, lint-and-test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test only)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: vereinsknete:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
