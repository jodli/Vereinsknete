name: Release & Deploy

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  # Explicit lowercase main image name (avoid unsupported toLower and Docker case rules)
  IMAGE_NAME: jodli/vereinsknete

permissions:
  contents: write
  packages: write

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: backend

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev pkg-config

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build and test backend
      working-directory: ./backend
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-targets --all-features -- -D warnings
        cargo test --verbose
        cargo build --release

    - name: Build and test frontend
      working-directory: ./frontend
      run: |
        npx tsc --noEmit
        npx eslint src --ext .ts,.tsx --max-warnings 0
        npm run test:ci
        npm run build

  docker-build-and-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU (for multi-arch emulation)
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/aarch64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [docker-build-and-push, addon-build-and-push]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, generating changelog from first commit"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          echo "Generating changelog from $PREVIOUS_TAG to ${{ github.ref_name }}"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        fi

        # Save changelog to output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## üöÄ VereinsKnete ${{ github.ref_name }}

          ### üìã Changes
          ${{ steps.changelog.outputs.changelog }}

          ### üê≥ Docker Images
          
          **Multi-architecture support:** `linux/amd64`, `linux/arm64`
          
          ```bash
          # Latest release
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          # Or use latest tag
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}

  addon-build-and-push:
    name: Add-on Image Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      REGISTRY: ghcr.io
      # Explicit lowercase add-on image name
      ADDON_IMAGE_NAME: jodli/vereinsknete-addon

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU (for multi-arch emulation)
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (addon)
      id: addon_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.ADDON_IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push add-on images (per-arch)
      id: addon_build
      uses: docker/build-push-action@v5
      with:
        context: .
        # Reuse monorepo root; Dockerfile should detect addon build via target if needed
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.addon_meta.outputs.tags }}
        labels: ${{ steps.addon_meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          # Provide optional args if Dockerfile supports them later
          ADDON_BUILD=1

    - name: Output add-on image tags
      run: echo "Add-on images pushed ${{ steps.addon_meta.outputs.tags }}"
